# object in R. You should see <Promise> disappear when you
# run the next line of code.
# Visit http://cran.r-project.org/doc/manuals/r-release/R-lang.html#Promise-objects
# if you want the expert insight on Promise objects. You won't
# need to the info on Promise objects to be successful in this course.
names(mtcars)
# names(mtcars) should output all the variable
# names in the data set. You might notice that the car names
# are not a variable in the data set. The car names have been saved
# as row names. More on this later.
# You should also see how many observations (obs.) are in the
# the data frame and the number of variables on each observation.
# 7. To get more information on the data set and the variables
# run the this next line of code.
?mtcars
# You can type a '?' before any command or a data set to learn
# more about it. The details and documentation will appear in
# the 'Help' tab.
# 8. To print out the data, run this next line as code.
mtcars
# Scroll up and down in the console to check out the data.
# This is the entire data frame printed out.
# 9. Run these next two functions, one at a time,
# and see if you can figure out what they do.
str(mtcars)
dim(mtcars)
# Scroll down for the answer.
# The first command, str(mtcars), gives us the structure of the
# data frame. It lists the variable names, the type of each variable
# (all of these variables are numerics) and some values for each
# variable.
# The second command, dim(mtcars), should output '[1] 32 11'
# to the console. The [1] indicates that 32 is the first value
# in the output.
# R uses 1 to start indexing (AND NOT ZERO BASED INDEXING as is true
# of many other programming languages.)
# 10. Read the documentation for row.names if you're want to know more.
?row.names
# Run this code to see the current row names in the data frame.
row.names(mtcars)
# Run this code to change the row names of the cars to numbers.
row.names(mtcars) <- c(1:32)
# Now print out the data frame by running the code below.
mtcars
# It's tedious to relabel our data frame with the right car names
# so let's reload the data set and print out the first ten rows.
data(mtcars)
head(mtcars, 10)
# The head() function prints out the first six rows of a data frame
# by default. Run the code below to see.
head(mtcars)
# I think you'll know what this does.
tail(mtcars, 3)
# 11. We've run nine commands so far:
#      c, nchar, data, str, dim, names, row.names, head, and tail.
# All of these commands took some inputs or arguments.
# To determine if a command takes more arguments or to learn
# about any default settings, you can look up the documentation
# using '?' before the command, much like you did to learn about
# the mtcars data set and the row.names
# 12. Let's examine our car data more closely. We can access an
# an individual variable (or column) from the data frame using
# the '$' sign. Run the code below to print out the variable
# miles per gallon. This is the mpg column in the data frame.
mtcars$mpg
# Print out any two other variables to the console.
# This is a vector containing the mpg (miles per gallon) of
# the 32 cars. Run this next line of code to get the average mpg for
# for all the cars. What is it?
# Enter this number for the quiz on the Udacity website.
# https://www.udacity.com/course/viewer#!/c-ud651/l-729069797/e-804129314/m-830829287
mean(mtcars$mpg)
"Kunal Chawla", "Jerry Wang")
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Jerry Wang")
mystery = nchar(udacious)
mystery
cls
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "Jerry Wang")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
names(mtcars)
?mtcars
mtcars
str(mtcars)
dim(mtcars)
?row.names
row.names(mtcars)
row.names(mtcars) <- c(1:32)
mtcars
data(mtcars)
head(mtcars, 10)
tail(mtcars, 3)
mtcars$mpg
mean(mtcars$mpg)
required_size()
required_size
required_size(s=sqrt(0.1093125*(1-0.1093125)/3200), d_min = 0.0075)
required_size(s=sqrt(0.1093125*(1-0.1093125)/3200), d_min = 0.0075)
required_size(s=sqrt(0.1093125*(1-0.1093125)/3200), d_min = 0.0075)
## Strategy: For a bunch of Ns, compute the z_star by achieving desired alpha, then
## compute what beta would be for that N using the acquired z_star.
## Pick the smallest N at which beta crosses the desired value
# Inputs:
#   The desired alpha for a two-tailed test
# Returns: The z-critical value
get_z_star = function(alpha) {
return(-qnorm(alpha / 2))
}
# Inputs:
#   z-star: The z-critical value
#   s: The variance of the metric at N=1
#   d_min: The practical significance level
#   N: The sample size of each group of the experiment
# Returns: The beta value of the two-tailed test
get_beta = function(z_star, s, d_min, N) {
SE = s /  sqrt(N)
return(pnorm(z_star * SE, mean=d_min, sd=SE))
}
# Inputs:
#   s: The variance of the metric with N=1 in each group
#   d_min: The practical significance level
#   Ns: The sample sizes to try
#   alpha: The desired alpha level of the test
#   beta: The desired beta level of the test
# Returns: The smallest N out of the given Ns that will achieve the desired
#          beta. There should be at least N samples in each group of the experiment.
#          If none of the given Ns will work, returns -1. N is the number of
#          samples in each group.
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
# Example analytic usage
# This is the example from Lesson 1, for which the online calculate gave 3,623
# samples in each group
# s is the pooled standard error for N=1 in each group,
# which is sqrt(p*(1-p)*(1/1 + 1/1))
required_size(s=sqrt(0.1*0.9*2), d_min=0.02)
# Sizing: Example
# Cookie-based diversion
# Since the standard error is proportional to 1/sqrt(N), s, or
# the standard error for N=1, is equal to the mesaured standard error with 5000
# in each group times sqrt(5000)
required_size(s=0.00515*sqrt(5000), d_min=0.02)
# User-id-based diversion
required_size(s=0.0119*sqrt(5000), d_min=0.02)
# Sizing: Quiz
# Original size
required_size(s=0.0628*sqrt(1000), d_min=0.01, Ns=seq(10, 500000, 100))
# Size with event-based diversion
required_size(s=0.0209*sqrt(1000), d_min=0.01, Ns=seq(10, 500000, 100))
# Size with event-based diversion and English-only traffic
required_size(s=0.0188*sqrt(1000), d_min=0.015)
# Size with cookie-based diversion, English-only traffic, and
# click-through-probability instead of click-through-rate
required_size(s=0.0445*sqrt(1000), d_min=0.015, Ns=seq(10, 500000, 100))
required_size(s=sqrt(0.1093125*(1-0.1093125)/3200), d_min = 0.0075)
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075)
required_size(s=sqrt(0.1093*(1-0.1093)*2),
d_min=0.0075, Ns=1:200000)
required_size(s=sqrt(0.1093*(1-0.1093)*2), d_min=0.0075)
required_size(s=sqrt(0.1093*(1-0.1093)*2), d_min=0.0075,, Ns=1:200000)
required_size(s=sqrt(0.1093*(1-0.1093)*2), d_min=0.0075,, Ns=1:400000)
required_size(s=sqrt(0.1093*(1-0.1093)*2), d_min=0.0075,, Ns=1:100000)
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075)
required_size(s=sqrt(0.1093*(1-0.1093)*2), d_min=0.0075, Ns=1:100000)
required_size(s=sqrt(0.1093*(1-0.1093)*2), d_min=0.0075, Ns=1:100000)*12.5
required_size(s=sqrt(0.1093*(1-0.1093)*2), d_min=0.0075, Ns=1:100000)*12.5*2
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, , Ns=1:200000)
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000)*12.5*2
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000)*12.5
required_size(s=sqrt(0.53*(1-0.53)*2), d_min=0.01, Ns=1:200000)*(40000/660)*2
required_size(s=sqrt(0.53*(1-0.53)*2), d_min=0.01, Ns=1:200000, alpha=0.0167)*(40000/660)*2
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000)*12.5*2
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000, alpha=0.0167)*12.5*2
required_size(s=sqrt(0.20625*(1-0.20625)*2), d_min = 0.01, Ns=1:200000, alpha=0.0167)*12.5*2
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000, alpha=0.0167)*12.5*2
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000, alpha=0.025)*12.5*2
required_size(s=sqrt(0.20625*(1-0.20625)*2), d_min = 0.01, Ns=1:200000, alpha=0.025)*12.5*2
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000, alpha=0.025)*12.5*2
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000, alpha=0.05)*12.5*2
## Strategy: For a bunch of Ns, compute the z_star by achieving desired alpha, then
## compute what beta would be for that N using the acquired z_star.
## Pick the smallest N at which beta crosses the desired value
# Inputs:
#   The desired alpha for a two-tailed test
# Returns: The z-critical value
get_z_star = function(alpha) {
return(-qnorm(alpha / 2))
}
# Inputs:
#   z-star: The z-critical value
#   s: The variance of the metric at N=1
#   d_min: The practical significance level
#   N: The sample size of each group of the experiment
# Returns: The beta value of the two-tailed test
get_beta = function(z_star, s, d_min, N) {
SE = s /  sqrt(N)
return(pnorm(z_star * SE, mean=d_min, sd=SE))
}
# Inputs:
#   s: The variance of the metric with N=1 in each group
#   d_min: The practical significance level
#   Ns: The sample sizes to try
#   alpha: The desired alpha level of the test
#   beta: The desired beta level of the test
# Returns: The smallest N out of the given Ns that will achieve the desired
#          beta. There should be at least N samples in each group of the experiment.
#          If none of the given Ns will work, returns -1. N is the number of
#          samples in each group.
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
# Example analytic usage
# This is the example from Lesson 1, for which the online calculate gave 3,623
# samples in each group
# s is the pooled standard error for N=1 in each group,
# which is sqrt(p*(1-p)*(1/1 + 1/1))
required_size(s=sqrt(0.1*0.9*2), d_min=0.02)
# Sizing: Example
# Cookie-based diversion
# Since the standard error is proportional to 1/sqrt(N), s, or
# the standard error for N=1, is equal to the mesaured standard error with 5000
# in each group times sqrt(5000)
required_size(s=0.00515*sqrt(5000), d_min=0.02)
# User-id-based diversion
required_size(s=0.0119*sqrt(5000), d_min=0.02)
# Sizing: Quiz
# Original size
required_size(s=0.0628*sqrt(1000), d_min=0.01, Ns=seq(10, 500000, 100))
# Size with event-based diversion
required_size(s=0.0209*sqrt(1000), d_min=0.01, Ns=seq(10, 500000, 100))
# Size with event-based diversion and English-only traffic
required_size(s=0.0188*sqrt(1000), d_min=0.015)
# Size with cookie-based diversion, English-only traffic, and
# click-through-probability instead of click-through-rate
required_size(s=0.0445*sqrt(1000), d_min=0.015, Ns=seq(10, 500000, 100))
required_size(s=sqrt(0.1093125*(1-0.1093125)*2), d_min = 0.0075, Ns=1:200000, alpha=0.05)*12.5*2
required_size(s=sqrt(0.53*(1-0.53)*2), d_min=0.01, Ns=1:200000, alpha=0.0167)*(40000/660)*2
required_size(s=sqrt(0.20625*(1-0.20625)*2), d_min = 0.01, Ns=1:200000, alpha=0.025)*12.5*2
required_size(s=sqrt(0.53*(1-0.53)*2), d_min=0.01, Ns=1:200000, alpha=0.05)*(40000/660)*2
4739879/40000
119/30
679300 /40000*0.7
679300 /40000*0.5
679300 /(40000*0.5)
679300 /(40000*0.7)
679300 /(40000*0.75)
679300 /(40000*0.5)
679300 /(40000*0.8)
679300 /(40000*0.75)
pf <- read.csv('prosperLoanData.csv')
setwd("~/Documents/nd/P6-d3/P6-Make-Effective-Data-Visualization/data")
pf <- read.csv('prosperLoanData.csv')
View(pf)
LoanData <- pf[, c(9, 50, 65, 68, 69, 71)]
View(LoanData)
LoanData <- pf[, c(9, 50, 64, 65, 68, 69, 71)]
View(LoanData)
wtrite.csv(loanData, file = "LoanData.csv")
write.csv(loanData, file = "LoanData.csv")
write.csv2(loanData, file = "LoanData.csv")
write.csv2(loanData, "LoanData.csv")
write.csv2(loanData, "LoanData.csv", row.names=FALSE)
write.csv(loanData, "LoanData.csv", row.names=FALSE)
write.csv(LoanData, "LoanData.csv", row.names=FALSE)
library(dplyr)
names(LoanData)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees))
n = n() %>%
arrange(age)
View(anual_LoanData)
LoanData <- pf[, c(9, 48, 50, 64, 65, 68, 69, 71)]
anual_LoanData_income <- LoanData %>%
group_by(LoanOriginationDate, IncomeRange) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees))
n = n() %>%
ungroup() %>%
arrange(age)
View(anual_LoanData_income)
write.csv(anual_LoanData, "anual_ProsperLoanData.csv", row.names=FALSE)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees))
n = n() %>%
arrange(age)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees),
n = n()) %>%
arrange(age)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees),
n = n()) %>%
arrange(LoanOriginationDate)
View(anual_LoanData)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees) %>%
arrange(LoanOriginationDate)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees))%>%
arrange(LoanOriginationDate)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees)) %>%
arrange(LoanOriginationDate)
View(anual_LoanData)
View(anual_LoanData_income)
LoanData <- pf[, c(9, 35, 48, 50, 64, 65, 68, 69, 71)]
View(LoanData)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees),
Avg_TotalInquiries = mean(TotalInquiries),
TotalInquiries = sum(TotalInquiries)) %>%
arrange(LoanOriginationDate)
library(dplyr)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees),
Avg_TotalInquiries = mean(TotalInquiries),
TotalInquiries = sum(TotalInquiries)) %>%
arrange(LoanOriginationDate)
View(anual_LoanData)
View(pf)
View(anual_LoanData_income)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees),
AmountDelinquent = mean(AmountDelinquent)) %>%
arrange(LoanOriginationDate)
View(anual_LoanData)
LoanData <- pf[, c(9, 35, 37, 48, 50, 64, 65, 68, 69, 71)]
View(LoanData)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees),
AmountDelinquent = mean(AmountDelinquent)) %>%
arrange(LoanOriginationDate)
View(anual_LoanData)
head(pf)
names(pf)
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = pf) +
geom_point(aes(color = IncomeRange))
library(ggplot2)
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = pf) +
geom_point(aes(color = IncomeRange))
ggplot(aes(x= IncomeRange, y = BorrowerRate), data = pf) +
boxplot()
ggplot(aes(x= IncomeRange, y = BorrowerRate), data = pf) +
geom_boxplot()
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate, IncomeRange) %>%
summarise(BorrowerRate = mean(BorrowerRate),
StatedMonthlyIncome = mean(StatedMonthlyIncome),
LoanOriginalAmount = mean(LoanOriginalAmount),
MonthlyLoanPayment = mean(MonthlyLoanPayment),
LP_CustomerPayments = mean(LP_CustomerPayments),
LP_InterestandFees = mean(LP_InterestandFees),
AmountDelinquent = mean(AmountDelinquent)) %>%
ungroup() %>%
arrange(LoanOriginationDate)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationDate, IncomeRange) %>%
summarise(BorrowerRate = mean(BorrowerRate)) %>%
ungroup() %>%
arrange(LoanOriginationDate)
View(anual_LoanData)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationQuarter, IncomeRange) %>%
summarise(BorrowerRate = mean(BorrowerRate)) %>%
ungroup() %>%
arrange(LoanOriginationDate)
anual_LoanData <- LoanData %>%
group_by(LoanOriginationQuarter, IncomeRange) %>%
summarise(BorrowerRate = mean(BorrowerRate)) %>%
ungroup() %>%
arrange(LoanOriginationQuarter)
anual_LoanData <- pf %>%
group_by(LoanOriginationQuarter, IncomeRange) %>%
summarise(BorrowerRate = mean(BorrowerRate)) %>%
ungroup() %>%
arrange(LoanOriginationQuarter)
View(anual_LoanData)
quarter_LoanData <- pf %>%
group_by(LoanOriginationQuarter, IncomeRange) %>%
summarise(BorrowerRate = mean(BorrowerRate)) %>%
ungroup() %>%
arrange(LoanOriginationQuarter)
View(quarter_LoanData)
quarter_LoanData <- subset(quarter_LoanData, IncomeRange!="Not Displayed")
View(quarter_LoanData)
quarter_LoanData <- subset(quarter_LoanData, IncomeRange!="Not displayed")
ggplot(aes(x= IncomeRange, y = BorrowerRate), data = quarter_LoanData) +
geom_boxplot()
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = quarter_LoanData) +
geom_line()
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = quarter_LoanData) +
geom_line(aes(color = IncomeRange))
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = quarter_LoanData) +
geom_freqpoly(aes(color = IncomeRange))
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = quarter_LoanData) +
geom_point(aes(color = IncomeRange))
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = quarter_LoanData) +
geom_point(aes(color = IncomeRange)) +
geom_line()
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = quarter_LoanData) +
geom_point() +
facet_wrap(~IncomeRange)
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = quarter_LoanData) +
geom_point() +geom_line()+
facet_wrap(~IncomeRange)
quarter_LoanData <- subset(quarter_LoanData, IncomeRange!="$0")
ggplot(aes(x= LoanOriginationQuarter, y = BorrowerRate), data = quarter_LoanData) +
geom_point() +
facet_wrap(~IncomeRange)
write.csv(quarter_LoanData, "quarter_ProsperLoanData.csv", row.names=FALSE)
str(quarter_LoanData)
level(quarter_LoanData$IncomeRange)
levels(quarter_LoanData$IncomeRange)
